# -*- coding: utf-8 -*-
"""Deteksi_Anomali _pada_Kueri_Pencarian.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1fQHzZwBs1iPURlYk-hN_uBzhhqA68k

## **Deteksi Anomali dalam Data Kueri Pencarian dengan Isolation Forest**

Deteksi anomalinya adalah proses mengidentifikasi pola atau contoh yang tidak biasa, jarang, atau tidak seperti yang diharapkan dalam data. Tujuan utamanya adalah untuk menemukan entitas yang berbeda secara signifikan dari mayoritas data. Langkah-langkah umum dalam melakukan deteksi anomalinya meliputi:


1. **Persiapan Data**: Mulai dengan mempersiapkan data yang akan digunakan untuk deteksi anomalinya. Ini melibatkan pemuatan data dari sumbernya dan memastikan bahwa data siap untuk diproses.

2. **Pemilihan Fitur**: Identifikasi fitur-fitur dari dataset yang akan digunakan untuk deteksi anomali. Pemilihan fitur yang tepat adalah kunci untuk membangun model yang efektif.

3. **Inisialisasi Model**: Pilih model atau teknik deteksi anomali yang sesuai dengan karakteristik data dan tujuan analisis. Salah satu pendekatan yang umum digunakan adalah Isolation Forest, yang memanfaatkan pendekatan berbasis pohon untuk mengisolasi contoh data yang jarang atau tidak umum.

4. **Pelatihan Model**: Latih model deteksi anomalinya menggunakan data yang dipilih. Proses pelatihan ini memungkinkan model untuk belajar pola yang umum dari data dan kemudian mengidentifikasi contoh yang mungkin merupakan anomali.

5. **Prediksi Anomali**: Setelah model dilatih, gunakan untuk memprediksi kehadiran anomali dalam data yang baru atau yang belum terlihat sebelumnya. Hasil prediksi ini sering kali disajikan dalam bentuk label atau skor yang menunjukkan tingkat anomali untuk setiap contoh data.

6. **Analisis Hasil**: Analisis hasil deteksi anomalinya untuk memahami pola-pola yang teridentifikasi sebagai anomali. Ini melibatkan pemahaman mengapa contoh tersebut dianggap sebagai anomali dan apa implikasinya dalam konteks aplikasi atau masalah yang sedang dihadapi.

7. **Tindak Lanjut**: Terakhir, langkah ini melibatkan pengambilan tindakan lanjut berdasarkan hasil deteksi anomalinya. Ini bisa berupa investigasi lebih lanjut terhadap contoh-contoh yang dianggap sebagai anomali atau tindakan korektif untuk meminimalkan dampaknya.

Deteksi anomalinya penting dalam berbagai bidang seperti keamanan jaringan, deteksi fraud, pemantauan kesehatan, dan analisis data industri. Penggunaannya membantu dalam mengidentifikasi perilaku atau kejadian yang tidak biasa yang mungkin tidak dapat terdeteksi dengan metode analisis data konvensional.

# Langkah-langkah Analisis Data Pencarian (Search Queries)

**Langkah 1: Memuat dan Menampilkan Data Awal**
"""

import pandas as pd

# Memuat data Queries.csv ke dalam dataframe queries_df
queries_df = pd.read_csv("Queries.csv")

print(queries_df.head())  # Menampilkan lima baris pertama dari dataframe

print(queries_df.info())  # Menampilkan informasi mengenai dataframe

"""Penjelasan:

1. Kode di atas dimulai dengan mengimpor modul pandas dan memuat data dari file "Queries.csv" ke dalam variabel queries_df sebagai dataframe.

2. print(queries_df.head()) digunakan untuk menampilkan lima baris pertama dari dataframe, sehingga kita bisa melihat struktur dan konten data secara cepat.

3. print(queries_df.info()) memberikan informasi lengkap mengenai dataframe, termasuk jumlah baris, nama kolom, dan tipe data masing-masing kolom. Hal ini penting untuk memahami apakah ada data yang hilang (missing) atau kolom dengan tipe data yang tidak sesuai.

**Langkah 2: Membersihkan dan Mengubah Format Kolom CTR**
"""

# Membersihkan kolom CTR dan mengubahnya menjadi format float
queries_df['CTR'] = queries_df['CTR'].str.rstrip('%').astype('float') / 100

"""Penjelasan:

1. Kolom 'CTR' dalam dataframe awalnya berisi persentase sebagai string (misalnya '5.6%').

2. Kode di atas membersihkan karakter '%' dari setiap nilai dalam kolom 'CTR' menggunakan metode .str.rstrip('%').

3. Kemudian, nilai yang sudah bersih diubah menjadi tipe data float dengan membagi nilai tersebut dengan 100, sehingga nilai persentase menjadi dalam bentuk desimal yang sesuai untuk analisis numerik lebih lanjut.

**Langkah 3: Pemrosesan dan Visualisasi Data Teks**
"""

import re
from collections import Counter
import plotly.express as px

# Fungsi untuk membersihkan dan membagi query menjadi kata-kata
def clean_and_split(query):
    words = re.findall(r'\b[a-zA-Z]+\b', query.lower())
    return words

# Memecah setiap query menjadi kata-kata dan menghitung frekuensi masing-masing kata
word_counts = Counter()
for query in queries_df['Top queries']:
    word_counts.update(clean_and_split(query))

# Membuat dataframe dari 20 kata paling umum beserta frekuensinya
word_freq_df = pd.DataFrame(word_counts.most_common(20), columns=['Kata', 'Frekuensi'])

# Plot frekuensi kata-kata
fig = px.bar(word_freq_df, x='Kata', y='Frekuensi', title='Top 20 Kata Paling Umum dalam Permintaan Pencarian')
fig.show()

"""Penjelasan:

1. Fungsi clean_and_split(query) menggunakan regular expression (regex) untuk membersihkan setiap query dalam kolom 'Top queries' dari karakter non-alfanumerik (kecuali spasi), mengubah semua kata menjadi huruf kecil, dan membagi kata-kata menjadi daftar (list) kata-kata.

2. Objek word_counts dari Counter() digunakan untuk menghitung frekuensi masing-masing kata dari seluruh query dalam kolom 'Top queries'.

3. Hasil dari Counter() dikonversi menjadi dataframe word_freq_df yang memuat 20 kata paling umum beserta frekuensinya, yang kemudian divisualisasikan sebagai bar chart menggunakan Plotly Express (px.bar).

**Langkah 4: Visualisasi Top Queries Berdasarkan Clicks dan Impressions**
"""

# Top queries berdasarkan Clicks dan Impressions
top_queries_clicks_vis = queries_df.nlargest(10, 'Clicks')[['Top queries', 'Clicks']]
top_queries_impressions_vis = queries_df.nlargest(10, 'Impressions')[['Top queries', 'Impressions']]

# Plotting
fig_clicks = px.bar(top_queries_clicks_vis, x='Top queries', y='Clicks', title='Top Queries berdasarkan Clicks')
fig_impressions = px.bar(top_queries_impressions_vis, x='Top queries', y='Impressions', title='Top Queries berdasarkan Impressions')
fig_clicks.show()
fig_impressions.show()

"""Penjelasan:

1. Dua visualisasi ini menunjukkan sepuluh query teratas berdasarkan jumlah 'Clicks' dan 'Impressions' masing-masing.

2. nlargest(10, 'Clicks') digunakan untuk mengambil 10 baris teratas berdasarkan nilai terbesar dalam kolom 'Clicks'.

3. nlargest(10, 'Impressions') digunakan untuk mengambil 10 baris teratas berdasarkan nilai terbesar dalam kolom 'Impressions'.

4. Plotting dilakukan menggunakan Plotly Express untuk menghasilkan bar chart yang memvisualisasikan data dengan jelas.

**Langkah 5: Visualisasi Queries dengan CTR Tertinggi dan Terendah**
"""

# Queries dengan CTR tertinggi dan terendah
top_ctr_vis = queries_df.nlargest(10, 'CTR')[['Top queries', 'CTR']]
bottom_ctr_vis = queries_df.nsmallest(10, 'CTR')[['Top queries', 'CTR']]

# Plotting
fig_top_ctr = px.bar(top_ctr_vis, x='Top queries', y='CTR', title='Top Queries berdasarkan CTR')
fig_bottom_ctr = px.bar(bottom_ctr_vis, x='Top queries', y='CTR', title='Bottom Queries berdasarkan CTR')
fig_top_ctr.show()
fig_bottom_ctr.show()

"""Penjelasan:

1. Dua visualisasi ini menampilkan sepuluh query dengan nilai CTR tertinggi dan terendah.

2. nlargest(10, 'CTR') digunakan untuk mengambil 10 baris teratas berdasarkan nilai terbesar dalam kolom 'CTR', sedangkan nsmallest(10, 'CTR') digunakan untuk mengambil 10 baris teratas berdasarkan nilai terkecil dalam kolom 'CTR'.

3. Bar chart dari Plotly Express digunakan lagi untuk memvisualisasikan data CTR untuk membandingkan performa query-query tersebut.

**Langkah 6: Visualisasi Matriks Korelasi**
"""

# Visualisasi matriks korelasi
correlation_matrix = queries_df[['Clicks', 'Impressions', 'CTR', 'Position']].corr()
fig_corr = px.imshow(correlation_matrix, text_auto=True, title='Matriks Korelasi')
fig_corr.show()

"""Penjelasan:

1. Matriks korelasi dihitung menggunakan corr() dari dataframe queries_df untuk melihat hubungan antara 'Clicks', 'Impressions', 'CTR', dan 'Position'.

2. Hasil dari korelasi kemudian divisualisasikan menggunakan heatmap dari Plotly Express (px.imshow) untuk memberikan pandangan visual yang jelas mengenai korelasi antar variabel numerik.

**Langkah 7: Deteksi Anomali Menggunakan Isolation Forest**
"""

from sklearn.ensemble import IsolationForest

# Memilih fitur-fitur yang relevan untuk deteksi anomali
fitur = queries_df[['Clicks', 'Impressions', 'CTR', 'Position']]

# Inisialisasi model Isolation Forest dengan parameter yang sesuai
iso_forest = IsolationForest(n_estimators=100, contamination=0.01)  # contamination adalah proporsi outlier yang diharapkan

# Melatih model Isolation Forest
iso_forest.fit(fitur)

# Memprediksi anomali berdasarkan model yang sudah dilatih
queries_df['anomaly'] = iso_forest.predict(fitur)

# Memfilter anomali
anomalies = queries_df[queries_df['anomaly'] == -1]

# Menampilkan informasi tentang anomali yang terdeteksi
print(anomalies[['Top queries', 'Clicks', 'Impressions', 'CTR', 'Position']])

"""Penjelasan:

1. Menggunakan IsolationForest dari sklearn.ensemble, fitur-fitur relevan ('Clicks', 'Impressions', 'CTR', 'Position') dipilih untuk mendeteksi anomali (outliers) dalam data query.

2. IsolationForest adalah algoritma unsupervised learning yang efektif dalam mendeteksi anomali berdasarkan isolasi dari mayoritas data.
Model IsolationForest dilatih dengan menggunakan fit(fitur) pada dataframe yang berisi fitur-fitur yang telah dipilih.

3. Anomali diprediksi dengan menggunakan predict(fitur) dan ditambahkan kolom 'anomaly' ke dalam dataframe queries_df.

4. Dataframe anomalies kemudian berisi semua baris yang diprediksi sebagai anomali (dengan nilai prediksi -1).

5. Menggunakan Variabel anomalies: Variabel anomalies merupakan subset dari dataframe queries_df yang berisi hanya baris-baris yang telah diprediksi sebagai anomali oleh model Isolation Forest.

6. Menampilkan Informasi: Pernyataan print digunakan untuk mencetak informasi dari kolom-kolom tertentu pada dataframe anomalies. Kolom-kolom yang dipilih untuk ditampilkan adalah 'Top queries', 'Clicks', 'Impressions', 'CTR', dan 'Position'.
"""